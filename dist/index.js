!function(t){var e={};function r(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,s){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(s,i,function(e){return t[e]}.bind(null,i));return s},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/",r(r.s=0)}([function(t,e,r){t.exports=r(1)},function(t,e,r){t.exports={BSP:r(2),CA:r(3),DW:r(4),Fill:r(5),Map:r(6)}},function(t,e){t.exports=class extends Generator{constructor(t,e={}){super(t,e),this.minH=10,this.minW=10,this.depth=10,this.ratio=.55,this.padding=isNaN(e.padding)?2:e.padding}makeTree(t,e){t&&e<this.depth&&(this.split(t),this.makeTree(t.l,e+1),this.makeTree(t.r,e+1))}split(t){if(t.h<2*this.minH||t.w<2*this.minW)return;let e=Math.random()>.5;if(t.w>=t.h*this.ratio)e=!1;else{if(!(t.h>=t.w*this.ratio))return;e=!0}if(e){let e=Math.floor(Math.random()*(t.h-2*this.minH+1))+this.minH,r=t.h-e;t.l=this.makeNode(t.x,t.y,t.w,e),t.r=this.makeNode(t.x,t.y+e,t.w,r)}else{let e=Math.floor(Math.random()*(t.w-2*this.minW+1))+this.minW,r=t.w-e;t.l=this.makeNode(t.x,t.y,e,t.h),t.r=this.makeNode(t.x+e,t.y,r,t.h)}}makeNode(t,e,r,s,i,o){return{x:t,y:e,h:s,w:r,l:i,r:o}}getLeafs(t){return t.l&&t.r?[].concat(this.getLeafs(t.l),this.getLeafs(t.r)):[t]}buildCorridors(t){if(t.l&&t.r){for(var e=Math.round(t.l.x+t.l.w/2),r=Math.round(t.l.y+t.l.h/2),s=Math.round(t.r.x+t.r.w/2),i=Math.round(t.r.y+t.r.h/2),o=e<=s?e:s,h=e>=s?e:s,a=r<=i?r:i,n=r>=i?r:i,l=o;l<h;l++)this.map.set(l,a,this.floor);for(var u=a;u<n;u++)this.map.set(o,u,this.floor);this.buildCorridors(t.l),this.buildCorridors(t.r)}}buildRooms(){this.getLeafs(this.root).forEach(t=>{for(var e=this.padding;e<t.w-this.padding;e++)for(var r=this.padding;r<t.h-this.padding;r++)this.map.set(t.x+e,t.y+r,this.floor)})}generate(){this.root=this.makeNode(0,0,map.w,map.h),this.makeTree(this.root,0),this.color=0,this.buildRooms(this.root),this.buildCorridors(this.root)}}},function(t,e){t.exports=class extends Generator{constructor(t,e={}){super(t,e),this.steps=[{reps:4,r1Cutoff:5,r2Cutoff:2},{reps:2,r1Cutoff:5,r2Cutoff:-1}],this.currentStep=0,this.currentRep=0}runStep(){const t=this.steps[this.currentStep];return!t||(this.map.values.map((e,r)=>{const{x:s,y:i}=this.map.indexToXY(r),o=this.map.getNeighborCount(s,i,this.wall),h=this.map.getNeighborCount(s,i,this.wall,2);return{x:s,y:i,val:o>=t.r1Cutoff||h<=t.r2Cutoff?this.wall:this.floor}}).forEach(t=>this.map.set(t.x,t.y,t.val)),this.currentRep++,this.currentRep>=t.reps&&(this.currentRep=0,this.currentStep++),!1)}reset(){this.currentStep=0,this.currentRep=0}generate(t=1){let e;for(let r=0;r<t;r++)e=this.runStep();return e}}},function(t,e){t.exports=class extends Generator{constructor(t,e={}){super(t,e),this.reset(),this.max=e.max||20}reset(){this.walkerPos={x:Math.floor(Math.random()*this.map.w),y:Math.floor(Math.random()*this.map.h)}}generate(){let t=0,e=0;for(;e<this.max&&t<2*this.max;){this.map.get(this.walkerPos.x,this.walkerPos.y)==this.wall&&(e++,this.map.set(this.walkerPos.x,this.walkerPos.y,this.floor));let r=Math.floor(4*Math.random());this.walkerPos.x+=0==r?1:1==r?-1:0,this.walkerPos.y+=2==r?1:3==r?-1:0,this.walkerPos.x=this.walkerPos.x<=0?0:this.walkerPos.x,this.walkerPos.x=this.walkerPos.x>=this.map.w-1?this.map.w-1:this.walkerPos.x,this.walkerPos.y=this.walkerPos.y<=0?0:this.walkerPos.y,this.walkerPos.y=this.walkerPos.y>=this.map.h-1?this.map.h-1:this.walkerPos.y,t++}}}},function(t,e){t.exports=class{static random(t,e=0,r=1,s=0){t.values=t.values.map(()=>Math.random()<=s?e:r)}static distance(t,e=0,r){for(var s=0;s<r;s++)t.values.forEach((r,s)=>{const{x:i,y:o}=t.indexToXY(s),h=t.getNeighbors(i,o),a=h.some(t=>t.v===e),n=h.reduce((t,e)=>Math.min(t,e),r);a||r===e?t.set(i,o,r):t.set(i,o,n+1)})}static flood(t,e,r){const s=t.get(e,r);let i=[{x:e,y:r,v:s}],o=[];for(;i.length;){const e=i.pop();if(!o.find(t=>t.x===e.x&&t.y===e.y)){let r=t.getNeighbors(e.x,e.y).filter(t=>t.v===s).filter(t=>!o.find(e=>e.x===t.x&&e.y===t.y));i=i.concat(r),o.push(e)}}return o}}},function(t,e){t.exports=class{constructor(t,e){this.w=t,this.h=e,this.values=Array(t*e).fill(0)}indexToXY(t){return{x:t%this.w,y:(t-t%this.w)/this.w}}xyToIndex(t,e){return t+this.w*e}set(t,e,r){this.values[this.xyToIndex(t,e)]=r}get(t,e){return this.values[this.xyToIndex(t,e)]}getNeighbors(t,e,r=1){const s=[];for(let i=-r;i<=r;i++)for(let o=-r;o<=r;o++){let r=t+i,h=e+o;r<0||r>this.w||h<0||h>this.h||0===i&&0===o||s.push({x:r,y:h,v:this.get(r,h)})}return s}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,